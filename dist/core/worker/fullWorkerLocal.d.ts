import { IWorkerMessage, IMainMessage, IRectType, IUpdateNodeOpt } from "..";
import { ISubWorkerInitOption, LocalWork } from "./base";
import { ServiceWorkForFullWorker } from "./fullWorkerService";
import { EmitEventType } from "../../plugin/types";
export declare class LocalWorkForFullWorker extends LocalWork {
    private combineUnitTime;
    private combineTimerId?;
    private effectSelectNodeData;
    private batchEraserWorks;
    private batchEraserRemoveNodes;
    constructor(opt: ISubWorkerInitOption);
    consumeDraw(data: IWorkerMessage, serviceWork: ServiceWorkForFullWorker): IMainMessage | undefined;
    consumeDrawAll(data: IWorkerMessage, serviceWork: ServiceWorkForFullWorker): IMainMessage | undefined;
    consumeFull(data: IWorkerMessage): void;
    removeWork(data: IWorkerMessage): void;
    removeNode(key: string): IRectType | undefined;
    checkTextActive(data: IWorkerMessage): void;
    colloctEffectSelectWork(data: IWorkerMessage): IWorkerMessage | undefined;
    updateSelector(param: {
        updateSelectorOpt: IUpdateNodeOpt;
        willRefreshSelector?: boolean;
        willSyncService?: boolean;
        willSerializeData?: boolean;
        emitEventType?: EmitEventType;
        isSync?: boolean;
        textUpdateForWoker?: boolean;
    }): IMainMessage | undefined;
    blurSelector(data?: IWorkerMessage): void;
    runEffectWork(callBack?: () => void): void;
    reRenderSelector(): void;
    updateFullSelectWork(data: IWorkerMessage): void;
    destroy(): void;
    private batchEffectWork;
    private drawPencilCombine;
    private drawSelector;
    private drawEraser;
    private batchEraserCombine;
    private drawPencil;
    private drawPencilFull;
    private updateBatchEraserCombineNode;
    private runEffectSelectWork;
}
